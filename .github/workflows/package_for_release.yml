name: package for release
on:
    workflow_dispatch:
        inputs:
            version:
                type: string
                description: Release version
                required: true

jobs:
    linux:
        runs-on: ubuntu-latest
        steps:
            - name: ðŸ›  Install system dependencies
              run: |
                  sudo add-apt-repository ppa:ubuntuhandbook1/ffmpeg6
                  sudo apt-get update -y -qq
                  sudo apt-get install -y libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev
            - name: ðŸ”§ Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: ðŸ“¥ Checkout repo
              uses: actions/checkout@v4

            - name: ðŸ“¦ Package
              run: cargo run --bin package_for_release

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_linux_x86_64.tar.gz
                path: live_compositor_linux_x86_64.tar.gz

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_with_web_renderer_linux_x86_64.tar.gz
                path: live_compositor_with_web_renderer_linux_x86_64.tar.gz

    linux-aarch64:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                path: "repo"
            - uses: uraimo/run-on-arch-action@v2
              name: Build artifact
              id: build
              with:
                arch: aarch64
                distro: ubuntu22.04

                  # Not required, but speeds up builds
                githubToken: ${{ github.token }}

                  # Create an artifacts directory
                setup: |
                  mkdir -p "${PWD}/artifacts"

                  # Mount the artifacts directory as /artifacts in the container
                dockerRunArgs: |
                  --volume "${PWD}/artifacts:/artifacts"
                  --volume "${PWD}/repo:/repo"

                  # The shell to run commands with in the container
                shell: /bin/sh

                install: |
                  apt update -y -qq
                  apt install software-properties-common -y
                  add-apt-repository ppa:ubuntuhandbook1/ffmpeg6
                  apt-get update -y -qq
                  apt-get install -y libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev curl git build-essential libssl-dev pkg-config libclang-dev
                  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                  rm -rf /var/lib/apt/lists/*

                  # Produce a binary artifact and place it in the mounted volume
                run: |
                  . "$HOME/.cargo/env"
                  cd "/repo"
                  cargo run --bin package_for_release
                  cp *.tar.gz /artifacts
            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_linux_aarch64.tar.gz
                path: artifacts/live_compositor_linux_aarch64.tar.gz

    macos_x86_64:
        runs-on: macos-12
        steps:
            - name: ðŸ›  Install system dependencies
              run: brew install ffmpeg

            - name: ðŸ”§ Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: ðŸ“¥ Checkout repo
              uses: actions/checkout@v4

            - name: ðŸ“¦ Package
              run: cargo run --bin package_for_release

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_darwin_x86_64.tar.gz
                path: live_compositor_darwin_x86_64.tar.gz

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_with_web_renderer_darwin_x86_64.tar.gz
                path: live_compositor_with_web_renderer_darwin_x86_64.tar.gz

    macos-aarch64:
        runs-on: macos-14
        steps:
            - name: ðŸ›  Install system dependencies
              run: brew install ffmpeg

            - name: ðŸ”§ Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: ðŸ“¥ Checkout repo
              uses: actions/checkout@v4

            - name: ðŸ“¦ Package
              run: cargo run --bin package_for_release

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_darwin_aarch64.tar.gz
                path: live_compositor_darwin_aarch64.tar.gz

            - uses: actions/upload-artifact@v4
              with:
                name: live_compositor_with_web_renderer_darwin_aarch64.tar.gz
                path: live_compositor_with_web_renderer_darwin_aarch64.tar.gz
    docker:
      runs-on: ubuntu-latest
      steps:
          - name: ðŸ“¥ Checkout repo
            uses: actions/checkout@v4

          - name: ðŸ”‘ Log in to GitHub Container Registry
            run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          - name: ðŸ”¨ Build Live Compositor image
            run: |
              docker build -t ghcr.io/software-mansion/live-compositor:${{ inputs.version }} -f build_tools/docker/slim.Dockerfile .
              docker image save ghcr.io/software-mansion/live-compositor:${{ inputs.version }} -o docker_image_live_compositor.tar
              docker image rm ghcr.io/software-mansion/live-compositor:${{ inputs.version }}

          - name: ðŸ“¤ Upload Live Compositor artifact
            uses: actions/upload-artifact@v4
            with:
              name: docker_image_live_compositor.tar
              path: docker_image_live_compositor.tar

          - name: ðŸ”¨ Build Live Compositor with Web Renderer image
            run: |
              rm docker_image_live_compositor.tar
              docker build -t ghcr.io/software-mansion/live-compositor:${{ inputs.version }}-web-renderer -f build_tools/docker/full.Dockerfile .
              docker image save ghcr.io/software-mansion/live-compositor:${{ inputs.version }}-web-renderer -o docker_image_live_compositor_with_web_renderer.tar
              docker image rm ghcr.io/software-mansion/live-compositor:${{ inputs.version }}-web-renderer

          - name: ðŸ“¤ Upload Live Compositor with Web Renderer artifact
            uses: actions/upload-artifact@v4
            with:
              name: docker_image_live_compositor_with_web_renderer.tar
              path: docker_image_live_compositor_with_web_renderer.tar
