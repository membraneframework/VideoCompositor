{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AspectRatio": {
      "type": "string"
    },
    "Component": {
      "oneOf": [
        {
          "additionalProperties": false,
          "description": "Component that represents incoming RTP stream. Stream is identified by an `input_id` that was defined in an `RegisterInputStream` request.",
          "properties": {
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input_id": {
              "$ref": "#/definitions/InputId"
            },
            "type": {
              "enum": [
                "input_stream"
              ],
              "type": "string"
            }
          },
          "required": [
            "input_id",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "background_color_rgba": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"#00000000\") Background color in a \"#RRGGBBAA\" format."
            },
            "bottom": {
              "description": "Distance between the bottom edge of this component and the bottom edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "children": {
              "items": {
                "$ref": "#/definitions/Component"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "direction": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ViewDirection"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Direction defines how static children are positioned inside the View component. \"row\" - Children positioned from left to right. \"column\" - Children positioned from top to bottom."
            },
            "height": {
              "description": "Height of a component in pixels. Required when using absolute positioning.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "left": {
              "description": "Distance between the left edge of this component and the left edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "overflow": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Overflow"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"hidden\") Controls what happens to content that is too big to fit into an area."
            },
            "right": {
              "description": "Distance between the right edge of this component and the right edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "rotation": {
              "description": "Rotation of a component in degrees. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "top": {
              "description": "Distance between the top edge of this component and the top edge of its parent. If this field is defined, then component will ignore a layout defined by its parent.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "transition": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Defines how this component will behave during a scene update. This will only have an effect if previous scene already contained a View component with the same id."
            },
            "type": {
              "enum": [
                "view"
              ],
              "type": "string"
            },
            "width": {
              "description": "Width of a component in pixels. Required when using absolute positioning.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "WebView component renders a website using Chromium.",
          "properties": {
            "children": {
              "items": {
                "$ref": "#/definitions/Component"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "instance_id": {
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ],
              "description": "ID of a previously registered `WebRenderer`.\n\nWarning: You can only refer to specific instance in one Component at the time."
            },
            "type": {
              "enum": [
                "web_view"
              ],
              "type": "string"
            }
          },
          "required": [
            "instance_id",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "children": {
              "items": {
                "$ref": "#/definitions/Component"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "resolution": {
              "allOf": [
                {
                  "$ref": "#/definitions/Resolution"
                }
              ],
              "description": "Resolution of a texture where shader will be executed."
            },
            "shader_id": {
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ],
              "description": "ID of a previously registered Shader."
            },
            "shader_param": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ShaderParam"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Object that will be serialized into a `struct` and passed inside the shader as: ```wgsl @group(1) @binding(0) var<uniform> ```\n\nNote: Structure of this object has to match the structure defined in a shader source code."
            },
            "type": {
              "enum": [
                "shader"
              ],
              "type": "string"
            }
          },
          "required": [
            "resolution",
            "shader_id",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "image_id": {
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ],
              "description": "ID of a previously registered Image."
            },
            "type": {
              "enum": [
                "image"
              ],
              "type": "string"
            }
          },
          "required": [
            "image_id",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "align": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"left\") Text align."
            },
            "background_color_rgba": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"#00000000\") Background color in `#RRGGBBAA` format."
            },
            "color_rgba": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"#FFFFFFFF\") Font color in `#RRGGBBAA` format."
            },
            "font_family": {
              "description": "(default=\"Verdana\") Font family.\n\nProvide family-name for specific font. \"generic-family\" values like e.g. \"sans-serif\" will not work. https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#family-name-value",
              "type": [
                "string",
                "null"
              ]
            },
            "font_size": {
              "description": "Font size in pixels.",
              "format": "float",
              "type": "number"
            },
            "height": {
              "description": "Height of a texture that text will be rendered on. If not provided the resulting texture will be sized based on the defined text, but limited to `max_width` value.\n\nIt's an error to provide `height` if width is not defined.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "line_height": {
              "description": "Distance between lines. Defaults to value of a `font_size` property.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "max_height": {
              "description": "(default=4320) Height of a texture that text will be rendered on. Value is ignored if height is defined.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "max_width": {
              "description": "(default=7682) Width of a texture that text will be rendered on. Value is ignored if width is defined.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "style": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextStyle"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"normal\") Font style. Font that you selected needs to support the selected weight."
            },
            "text": {
              "type": "string"
            },
            "type": {
              "enum": [
                "text"
              ],
              "type": "string"
            },
            "weight": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWeight"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"normal\") Font weight. Font that you selected needs to support the selected weight."
            },
            "width": {
              "description": "Width of a texture that text will be rendered on. If not provided the resulting texture will be sized based on the defined text, but limited to `max_width` value.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "wrap": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWrapMode"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"none\") Text wrapping options."
            }
          },
          "required": [
            "font_size",
            "text",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "background_color_rgba": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"#00000000\") Background color in a \"#RRGGBBAA\" format."
            },
            "children": {
              "items": {
                "$ref": "#/definitions/Component"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "height": {
              "description": "Height of a component in pixels.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "horizontal_alignment": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"center\") Horizontal alignment of tiles."
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "margin": {
              "description": "(default=0) Margin of each tile in pixels.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "padding": {
              "description": "(default=0) Padding on each tile in pixels.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            },
            "tile_aspect_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AspectRatio"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"16:9\") Aspect ration of a tile in \"W:H\" format, where W and H are integers."
            },
            "type": {
              "enum": [
                "tiles"
              ],
              "type": "string"
            },
            "vertical_alignment": {
              "anyOf": [
                {
                  "$ref": "#/definitions/VerticalAlign"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(default=\"center\") Vertical alignment of tiles."
            },
            "width": {
              "description": "Width of a component in pixels.",
              "format": "float",
              "type": [
                "number",
                "null"
              ]
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "ComponentId": {
      "type": "string"
    },
    "HorizontalAlign": {
      "enum": [
        "left",
        "right",
        "justified",
        "center"
      ],
      "type": "string"
    },
    "InputId": {
      "type": "string"
    },
    "OutputId": {
      "type": "string"
    },
    "Overflow": {
      "oneOf": [
        {
          "description": "Components that are outside of their parent area will be rendered.",
          "enum": [
            "visible"
          ],
          "type": "string"
        },
        {
          "description": "Only render parts of the children that are inside their parent area.",
          "enum": [
            "hidden"
          ],
          "type": "string"
        },
        {
          "description": "If children component are to big to fit inside the parent resize everything inside to fit.\n\nComponents that have dynamic size will be treated as if they had a size 0 when calculating scaling factor.\n\nWarning: This will resize everything inside even absolutely positioned elements. For example, if you have an element in the bottom right corner and content will be rescaled by a factor 0.5x then that component will end up in the middle of it's parent",
          "enum": [
            "fit"
          ],
          "type": "string"
        }
      ]
    },
    "RGBAColor": {
      "type": "string"
    },
    "RendererId": {
      "type": "string"
    },
    "Resolution": {
      "properties": {
        "height": {
          "description": "Height in pixels.",
          "format": "uint",
          "minimum": 0.0,
          "type": "integer"
        },
        "width": {
          "description": "Width in pixels.",
          "format": "uint",
          "minimum": 0.0,
          "type": "integer"
        }
      },
      "required": [
        "height",
        "width"
      ],
      "type": "object"
    },
    "ShaderParam": {
      "oneOf": [
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "f32"
              ],
              "type": "string"
            },
            "value": {
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "u32"
              ],
              "type": "string"
            },
            "value": {
              "format": "uint32",
              "minimum": 0.0,
              "type": "integer"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "i32"
              ],
              "type": "string"
            },
            "value": {
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "list"
              ],
              "type": "string"
            },
            "value": {
              "items": {
                "$ref": "#/definitions/ShaderParam"
              },
              "type": "array"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "struct"
              ],
              "type": "string"
            },
            "value": {
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              },
              "type": "array"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        }
      ]
    },
    "ShaderParamStructField": {
      "oneOf": [
        {
          "additionalProperties": false,
          "properties": {
            "field_name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "f32"
              ],
              "type": "string"
            },
            "value": {
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field_name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "u32"
              ],
              "type": "string"
            },
            "value": {
              "format": "uint32",
              "minimum": 0.0,
              "type": "integer"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field_name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "i32"
              ],
              "type": "string"
            },
            "value": {
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field_name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "list"
              ],
              "type": "string"
            },
            "value": {
              "items": {
                "$ref": "#/definitions/ShaderParam"
              },
              "type": "array"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field_name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "struct"
              ],
              "type": "string"
            },
            "value": {
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              },
              "type": "array"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        }
      ],
      "properties": {
        "field_name": {
          "type": "string"
        }
      },
      "required": [
        "field_name"
      ],
      "type": "object"
    },
    "TextStyle": {
      "enum": [
        "normal",
        "italic",
        "oblique"
      ],
      "type": "string"
    },
    "TextWeight": {
      "oneOf": [
        {
          "description": "Thin weight (100), the thinnest value.",
          "enum": [
            "thin"
          ],
          "type": "string"
        },
        {
          "description": "Extra light weight (200).",
          "enum": [
            "extra_light"
          ],
          "type": "string"
        },
        {
          "description": "Light weight (300).",
          "enum": [
            "light"
          ],
          "type": "string"
        },
        {
          "description": "Normal (400).",
          "enum": [
            "normal"
          ],
          "type": "string"
        },
        {
          "description": "Medium weight (500, higher than normal).",
          "enum": [
            "medium"
          ],
          "type": "string"
        },
        {
          "description": "Semibold weight (600).",
          "enum": [
            "semi_bold"
          ],
          "type": "string"
        },
        {
          "description": "Bold weight (700).",
          "enum": [
            "bold"
          ],
          "type": "string"
        },
        {
          "description": "Extra-bold weight (800).",
          "enum": [
            "extra_bold"
          ],
          "type": "string"
        },
        {
          "description": "Black weight (900), the thickest value.",
          "enum": [
            "black"
          ],
          "type": "string"
        }
      ]
    },
    "TextWrapMode": {
      "oneOf": [
        {
          "description": "Disable text wrapping. Text that does not fit inside the texture will be cut off.",
          "enum": [
            "none"
          ],
          "type": "string"
        },
        {
          "description": "Wraps at a glyph level.",
          "enum": [
            "glyph"
          ],
          "type": "string"
        },
        {
          "description": "Preserve words when wrapping.",
          "enum": [
            "word"
          ],
          "type": "string"
        }
      ]
    },
    "Transition": {
      "properties": {
        "duration_ms": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "duration_ms"
      ],
      "type": "object"
    },
    "VerticalAlign": {
      "enum": [
        "top",
        "center",
        "bottom",
        "justified"
      ],
      "type": "string"
    },
    "ViewDirection": {
      "enum": [
        "row",
        "column"
      ],
      "type": "string"
    }
  },
  "properties": {
    "output_id": {
      "$ref": "#/definitions/OutputId"
    },
    "root": {
      "$ref": "#/definitions/Component"
    }
  },
  "required": [
    "output_id",
    "root"
  ],
  "title": "OutputScene",
  "type": "object"
}