{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OutputScene",
  "type": "object",
  "required": [
    "output_id",
    "root"
  ],
  "properties": {
    "output_id": {
      "$ref": "#/definitions/OutputId"
    },
    "root": {
      "$ref": "#/definitions/Component"
    }
  },
  "definitions": {
    "OutputId": {
      "type": "string"
    },
    "Component": {
      "oneOf": [
        {
          "description": "Component representing incoming RTP stream. Specific streams can be identified by an `input_id` that was part of a `RegisterInputStream` request.",
          "type": "object",
          "required": [
            "input_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "input_stream"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input_id": {
              "$ref": "#/definitions/InputId"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "view"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "width": {
              "description": "Width of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "direction": {
              "description": "Direction defines how static children are positioned inside the View component. \"row\" - Children positioned from left to right. \"column\" - Children positioned from top to bottom.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ViewDirection"
                },
                {
                  "type": "null"
                }
              ]
            },
            "top": {
              "description": "Distance between the top edge of this component and the top edge of its parent. If this field is defined, then component will ignore a layout defined by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "left": {
              "description": "Distance between the left edge of this component and the left edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "bottom": {
              "description": "Distance between the bottom edge of this component and the bottom edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "right": {
              "description": "Distance between the right edge of this component and the right edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "rotation": {
              "description": "Rotation of a component in degrees. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "transition": {
              "description": "Defines how this component will behave during a scene update. This will only have an effect if previous scene already contained a View component with the same id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ]
            },
            "overflow": {
              "description": "(default=\"hidden\") Controls what happens to content that is too big to fit into an area.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Overflow"
                },
                {
                  "type": "null"
                }
              ]
            },
            "background_color_rgba": {
              "description": "(default=\"#00000000\") Background color in a \"#RRGGBBAA\" format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "WebView component renders a website using Chromium.",
          "type": "object",
          "required": [
            "instance_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "web_view"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "instance_id": {
              "description": "ID of a previously registered `WebRenderer`.\n\nWarning: You can only refer to specific instance in one Component at the time.",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "resolution",
            "shader_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "shader"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "shader_id": {
              "description": "ID of a previously registered Shader.",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            },
            "shader_param": {
              "description": "Object that will be serialized into a `struct` and passed inside the shader as: ```wgsl @group(1) @binding(0) var<uniform> ```\n\nNote: This object's structure must match the structure defined in a shader source code.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ShaderParam"
                },
                {
                  "type": "null"
                }
              ]
            },
            "resolution": {
              "description": "Resolution of a texture where shader will be executed.",
              "allOf": [
                {
                  "$ref": "#/definitions/Resolution"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "image_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "image"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "image_id": {
              "description": "ID of a previously registered Image.",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "font_size",
            "text",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "text": {
              "type": "string"
            },
            "width": {
              "description": "Width of a texture that text will be rendered on. If not provided the resulting texture will be sized based on the defined text, but limited to `max_width` value.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a texture that text will be rendered on. If not provided the resulting texture will be sized based on the defined text, but limited to `max_width` value.\n\nIt's an error to provide `height` if width is not defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "max_width": {
              "description": "(default=7682) Maximal width. Limits the width of a texture that text will be rendered on. Value is ignored if width is defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "max_height": {
              "description": "(default=4320) Maximal height. Limits the height of a texture that text will be rendered on. Value is ignored if height is defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "font_size": {
              "description": "Font size in pixels.",
              "type": "number",
              "format": "float"
            },
            "line_height": {
              "description": "Distance between lines in pixels. Defaults to the value of the `font_size` property.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "color_rgba": {
              "description": "(default=\"#FFFFFFFF\") Font color in `#RRGGBBAA` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "background_color_rgba": {
              "description": "(default=\"#00000000\") Background color in `#RRGGBBAA` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "font_family": {
              "description": "(default=\"Verdana\") Font family.\n\nProvide family-name for specific font. \"generic-family\" values like e.g. \"sans-serif\" will not work. https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#family-name-value",
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "(default=\"normal\") Font style. The selected font needs to support this specific style.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextStyle"
                },
                {
                  "type": "null"
                }
              ]
            },
            "align": {
              "description": "(default=\"left\") Text align.",
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "wrap": {
              "description": "(default=\"none\") Text wrapping options.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWrapMode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "weight": {
              "description": "(default=\"normal\") Font weight. The selected font needs to support this specific weight.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWeight"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "tiles"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "width": {
              "description": "Width of a component in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "background_color_rgba": {
              "description": "(default=\"#00000000\") Background color in a \"#RRGGBBAA\" format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tile_aspect_ratio": {
              "description": "(default=\"16:9\") Aspect ration of a tile in \"W:H\" format, where W and H are integers.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AspectRatio"
                },
                {
                  "type": "null"
                }
              ]
            },
            "margin": {
              "description": "(default=0) Margin of each tile in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "padding": {
              "description": "(default=0) Padding on each tile in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "horizontal_alignment": {
              "description": "(default=\"center\") Horizontal alignment of tiles.",
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "vertical_alignment": {
              "description": "(default=\"center\") Vertical alignment of tiles.",
              "anyOf": [
                {
                  "$ref": "#/definitions/VerticalAlign"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "child",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "rescaler"
              ]
            },
            "id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "child": {
              "$ref": "#/definitions/Component"
            },
            "mode": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ResizeMode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "horizontal_align": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "vertical_align": {
              "anyOf": [
                {
                  "$ref": "#/definitions/VerticalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "width": {
              "description": "Width of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "top": {
              "description": "Distance between the top edge of this component and the top edge of its parent. If this field is defined, then component will ignore a layout defined by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "left": {
              "description": "Distance between the left edge of this component and the left edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "bottom": {
              "description": "Distance between the bottom edge of this component and the bottom edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "right": {
              "description": "Distance between the right edge of this component and the right edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "rotation": {
              "description": "Rotation of a component in degrees. If this field is defined, this element will be absolutely positioned, instead of being laid out by it's parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "transition": {
              "description": "Defines how this component will behave during a scene update. This will only have an effect if previous scene already contained a View component with the same id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ComponentId": {
      "type": "string"
    },
    "InputId": {
      "type": "string"
    },
    "ViewDirection": {
      "type": "string",
      "enum": [
        "row",
        "column"
      ]
    },
    "Transition": {
      "type": "object",
      "required": [
        "duration_ms"
      ],
      "properties": {
        "duration_ms": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Overflow": {
      "oneOf": [
        {
          "description": "Components that are outside of their parent area will be rendered.",
          "type": "string",
          "enum": [
            "visible"
          ]
        },
        {
          "description": "Only render parts of the children that are inside their parent area.",
          "type": "string",
          "enum": [
            "hidden"
          ]
        },
        {
          "description": "If children component are to big to fit inside the parent resize everything inside to fit.\n\nComponents that have dynamic size will be treated as if they had a size 0 when calculating scaling factor.\n\nWarning: This will resize everything inside even absolutely positioned elements. For example, if you have an element in the bottom right corner and content will be rescaled by a factor 0.5x then that component will end up in the middle of it's parent",
          "type": "string",
          "enum": [
            "fit"
          ]
        }
      ]
    },
    "RGBAColor": {
      "type": "string"
    },
    "RendererId": {
      "type": "string"
    },
    "ShaderParam": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "f32"
              ]
            },
            "value": {
              "type": "number",
              "format": "float"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "u32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "i32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "list"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParam"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "struct"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ShaderParamStructField": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "f32"
              ]
            },
            "value": {
              "type": "number",
              "format": "float"
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "u32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "i32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "int32"
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "list"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParam"
              }
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "struct"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              }
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ],
      "required": [
        "field_name"
      ],
      "properties": {
        "field_name": {
          "type": "string"
        }
      }
    },
    "Resolution": {
      "type": "object",
      "required": [
        "height",
        "width"
      ],
      "properties": {
        "width": {
          "description": "Width in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "height": {
          "description": "Height in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      }
    },
    "TextStyle": {
      "type": "string",
      "enum": [
        "normal",
        "italic",
        "oblique"
      ]
    },
    "HorizontalAlign": {
      "type": "string",
      "enum": [
        "left",
        "right",
        "justified",
        "center"
      ]
    },
    "TextWrapMode": {
      "oneOf": [
        {
          "description": "Disable text wrapping. Text that does not fit inside the texture will be cut off.",
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "description": "Wraps at a glyph level.",
          "type": "string",
          "enum": [
            "glyph"
          ]
        },
        {
          "description": "Wraps at a word level. Prevent splitting words when wrapping.",
          "type": "string",
          "enum": [
            "word"
          ]
        }
      ]
    },
    "TextWeight": {
      "description": "Font weight, based on [OpenType specification](https://learn.microsoft.com/en-gb/typography/opentype/spec/os2#usweightclass).",
      "oneOf": [
        {
          "description": "Weight 100.",
          "type": "string",
          "enum": [
            "thin"
          ]
        },
        {
          "description": "Weight 200.",
          "type": "string",
          "enum": [
            "extra_light"
          ]
        },
        {
          "description": "Weight 300.",
          "type": "string",
          "enum": [
            "light"
          ]
        },
        {
          "description": "Weight 400.",
          "type": "string",
          "enum": [
            "normal"
          ]
        },
        {
          "description": "Weight 500.",
          "type": "string",
          "enum": [
            "medium"
          ]
        },
        {
          "description": "Weight 600.",
          "type": "string",
          "enum": [
            "semi_bold"
          ]
        },
        {
          "description": "Weight 700.",
          "type": "string",
          "enum": [
            "bold"
          ]
        },
        {
          "description": "Weight 800.",
          "type": "string",
          "enum": [
            "extra_bold"
          ]
        },
        {
          "description": "Weight 900.",
          "type": "string",
          "enum": [
            "black"
          ]
        }
      ]
    },
    "AspectRatio": {
      "type": "string"
    },
    "VerticalAlign": {
      "type": "string",
      "enum": [
        "top",
        "center",
        "bottom",
        "justified"
      ]
    },
    "ResizeMode": {
      "type": "string",
      "enum": [
        "fit",
        "fill"
      ]
    }
  }
}
