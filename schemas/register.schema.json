{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RegisterRequest",
  "oneOf": [
    {
      "description": "Parameters for an input stream from RTP source. At least one of `video` and `audio` has to be defined.",
      "type": "object",
      "required": [
        "entity_type",
        "input_id",
        "port"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "rtp_input_stream"
          ]
        },
        "input_id": {
          "description": "An identifier for the input stream.",
          "allOf": [
            {
              "$ref": "#/definitions/InputId"
            }
          ]
        },
        "port": {
          "description": "UDP port or port range on which the compositor should listen for the stream.",
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            }
          ]
        },
        "transport_protocol": {
          "description": "Transport protocol.",
          "anyOf": [
            {
              "$ref": "#/definitions/TransportProtocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "video": {
          "description": "Parameters of a video source included in the RTP stream.",
          "anyOf": [
            {
              "$ref": "#/definitions/InputRtpVideoOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "audio": {
          "description": "Parameters of an audio source included in the RTP stream.",
          "anyOf": [
            {
              "$ref": "#/definitions/InputRtpAudioOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": {
          "description": "(**default=`false`**) If input is required and the stream is not delivered on time, then LiveCompositor will delay producing output frames.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "offset_ms": {
          "description": "Offset in milliseconds relative to the pipeline start (start request). If the offset is not defined then the stream will be synchronized based on the delivery time of the initial frames.",
          "type": [
            "number",
            "null"
          ],
          "format": "double"
        }
      }
    },
    {
      "description": "Input stream from MP4 file. Exactly one of `url` and `path` has to be defined.",
      "type": "object",
      "required": [
        "entity_type",
        "input_id"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "mp4"
          ]
        },
        "input_id": {
          "description": "An identifier for the input stream.",
          "allOf": [
            {
              "$ref": "#/definitions/InputId"
            }
          ]
        },
        "url": {
          "description": "URL of the MP4 file.",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "Path to the MP4 file.",
          "type": [
            "string",
            "null"
          ]
        },
        "required": {
          "description": "(**default=`false`**) If input is required and frames are not processed on time, then LiveCompositor will delay producing output frames.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "offset_ms": {
          "description": "Offset in milliseconds relative to the pipeline start (start request). If offset is not defined then stream is synchronized based on the first frames delivery time.",
          "type": [
            "number",
            "null"
          ],
          "format": "double"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "output_id",
        "port"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "output_stream"
          ]
        },
        "output_id": {
          "$ref": "#/definitions/OutputId"
        },
        "port": {
          "$ref": "#/definitions/Port"
        },
        "ip": {
          "type": [
            "string",
            "null"
          ]
        },
        "transport_protocol": {
          "anyOf": [
            {
              "$ref": "#/definitions/TransportProtocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "video": {
          "anyOf": [
            {
              "$ref": "#/definitions/OutputVideoOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "audio": {
          "anyOf": [
            {
              "$ref": "#/definitions/OutputAudioOptions"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "shader_id",
        "source"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "shader"
          ]
        },
        "shader_id": {
          "description": "Id of a shader. It can be used in a [`Shader`](../components/Shader) component after registration.",
          "allOf": [
            {
              "$ref": "#/definitions/RendererId"
            }
          ]
        },
        "source": {
          "description": "Shader source code. [Learn more.](../../concept/shaders)",
          "type": "string"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "instance_id",
        "resolution",
        "url"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "web_renderer"
          ]
        },
        "instance_id": {
          "description": "Id of a web renderer instance. It can be used in a [`WebView`](../components/WebView) component after registration.",
          "allOf": [
            {
              "$ref": "#/definitions/RendererId"
            }
          ]
        },
        "url": {
          "description": "Url of a website that you want to render.",
          "type": "string"
        },
        "resolution": {
          "description": "Resolution.",
          "allOf": [
            {
              "$ref": "#/definitions/Resolution"
            }
          ]
        },
        "embedding_method": {
          "description": "Mechanism used to render input frames on the website.",
          "anyOf": [
            {
              "$ref": "#/definitions/WebEmbeddingMethod"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "png"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "jpeg"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "svg"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            },
            "resolution": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Resolution"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "gif"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      ],
      "required": [
        "entity_type"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "image"
          ]
        }
      }
    }
  ],
  "definitions": {
    "InputId": {
      "type": "string"
    },
    "Port": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      ]
    },
    "TransportProtocol": {
      "oneOf": [
        {
          "description": "UDP protocol.",
          "type": "string",
          "enum": [
            "udp"
          ]
        },
        {
          "description": "TCP protocol where LiveCompositor is the server side of the connection.",
          "type": "string",
          "enum": [
            "tcp_server"
          ]
        }
      ]
    },
    "InputRtpVideoOptions": {
      "type": "object",
      "properties": {
        "codec": {
          "description": "(**default=`\"h264\"`**) Video codec.",
          "anyOf": [
            {
              "$ref": "#/definitions/VideoCodec"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "VideoCodec": {
      "oneOf": [
        {
          "description": "H264 video.",
          "type": "string",
          "enum": [
            "h264"
          ]
        }
      ]
    },
    "InputRtpAudioOptions": {
      "type": "object",
      "properties": {
        "codec": {
          "description": "(**default=`\"opus\"`**) Audio codec.",
          "anyOf": [
            {
              "$ref": "#/definitions/AudioCodec"
            },
            {
              "type": "null"
            }
          ]
        },
        "forward_error_correction": {
          "description": "(**default=`false`**) Specifies whether the stream uses forward error correction. It's specific for Opus codec. For more information, check out [RFC](https://datatracker.ietf.org/doc/html/rfc6716#section-2.1.7).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "AudioCodec": {
      "oneOf": [
        {
          "description": "Opus audio.",
          "type": "string",
          "enum": [
            "opus"
          ]
        }
      ]
    },
    "OutputId": {
      "type": "string"
    },
    "OutputVideoOptions": {
      "type": "object",
      "required": [
        "encoder_preset",
        "initial",
        "resolution"
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/Resolution"
        },
        "encoder_preset": {
          "$ref": "#/definitions/VideoEncoderPreset"
        },
        "initial": {
          "$ref": "#/definitions/Component"
        },
        "send_eos_when": {
          "description": "Condition for termination of output stream based on the input streams states.",
          "anyOf": [
            {
              "$ref": "#/definitions/OutputEndCondition"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Resolution": {
      "type": "object",
      "required": [
        "height",
        "width"
      ],
      "properties": {
        "width": {
          "description": "Width in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "height": {
          "description": "Height in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      }
    },
    "VideoEncoderPreset": {
      "type": "string",
      "enum": [
        "ultrafast",
        "superfast",
        "veryfast",
        "faster",
        "fast",
        "medium",
        "slow",
        "slower",
        "veryslow",
        "placebo"
      ]
    },
    "Component": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "input_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "input_stream"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input_id": {
              "description": "Id of an input. It identifies a stream registered using a [`RegisterInputStream`](../routes#register-input-stream) request.",
              "allOf": [
                {
                  "$ref": "#/definitions/InputId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "view"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "description": "List of component's children.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "width": {
              "description": "Width of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "direction": {
              "description": "Direction defines how static children are positioned inside a View component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ViewDirection"
                },
                {
                  "type": "null"
                }
              ]
            },
            "top": {
              "description": "Distance in pixels between this component's top edge and its parent's top edge. If this field is defined, then the component will ignore a layout defined by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "left": {
              "description": "Distance in pixels between this component's left edge and its parent's left edge. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "bottom": {
              "description": "Distance in pixels between the bottom edge of this component and the bottom edge of its parent. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "right": {
              "description": "Distance in pixels between this component's right edge and its parent's right edge. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "rotation": {
              "description": "Rotation of a component in degrees. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "transition": {
              "description": "Defines how this component will behave during a scene update. This will only have an effect if the previous scene already contained a View component with the same id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ]
            },
            "overflow": {
              "description": "(**default=`\"hidden\"`**) Controls what happens to content that is too big to fit into an area.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Overflow"
                },
                {
                  "type": "null"
                }
              ]
            },
            "background_color_rgba": {
              "description": "(**default=`\"#00000000\"`**) Background color in a `\"#RRGGBBAA\"` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "WebView component renders a website using Chromium.",
          "type": "object",
          "required": [
            "instance_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "web_view"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "description": "List of component's children.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "instance_id": {
              "description": "Id of a web renderer instance. It identifies an instance registered using a [`RegisterRenderer`](../routes#register-renderer) request.\n\n<br/> <br/>\n\n:::warning\n\nYou can only refer to specific instances in one Component at a time.\n\n:::",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "resolution",
            "shader_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "shader"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "description": "List of component's children.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "shader_id": {
              "description": "Id of a shader. It identifies a shader registered using a [`RegisterRenderer`](../routes#register-renderer) request.",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            },
            "shader_param": {
              "description": "Object that will be serialized into a `struct` and passed inside the shader as:\n\n<br/><br/>\n\n```wgsl\n\n@group(1) @binding(0) var<uniform>\n\n```\n\n:::note\n\nThis object's structure must match the structure defined in a shader source code.\n\n:::",
              "anyOf": [
                {
                  "$ref": "#/definitions/ShaderParam"
                },
                {
                  "type": "null"
                }
              ]
            },
            "resolution": {
              "description": "Resolution of a texture where shader will be executed.",
              "allOf": [
                {
                  "$ref": "#/definitions/Resolution"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "image_id",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "image"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "image_id": {
              "description": "Id of an image. It identifies an image registered using a [`RegisterRenderer`](../routes#register-renderer) request.",
              "allOf": [
                {
                  "$ref": "#/definitions/RendererId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "font_size",
            "text",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "text": {
              "type": "string"
            },
            "width": {
              "description": "Width of a texture that text will be rendered on. If not provided, the resulting texture will be sized based on the defined text but limited to `max_width` value.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a texture that text will be rendered on. If not provided, the resulting texture will be sized based on the defined text but limited to `max_height` value.\n\nIt's an error to provide `height` if `width` is not defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "max_width": {
              "description": "(**default=`7682`**) Maximal `width`. Limits the width of the texture that the text will be rendered on. Value is ignored if `width` is defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "max_height": {
              "description": "(**default=`4320`**) Maximal `height`. Limits the height of the texture that the text will be rendered on. Value is ignored if height is defined.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "font_size": {
              "description": "Font size in pixels.",
              "type": "number",
              "format": "float"
            },
            "line_height": {
              "description": "Distance between lines in pixels. Defaults to the value of the `font_size` property.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "color_rgba": {
              "description": "(**default=`\"#FFFFFFFF\"`**) Font color in `#RRGGBBAA` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "background_color_rgba": {
              "description": "(**default=`\"#00000000\"`**) Background color in `#RRGGBBAA` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "font_family": {
              "description": "(**default=`\"Verdana\"`**) Font family. Provide [family-name](https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#family-name-value) for a specific font. \"generic-family\" values like e.g. \"sans-serif\" will not work.",
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "(**default=`\"normal\"`**) Font style. The selected font needs to support the specified style.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextStyle"
                },
                {
                  "type": "null"
                }
              ]
            },
            "align": {
              "description": "(**default=`\"left\"`**) Text align.",
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "wrap": {
              "description": "(**default=`\"none\"`**) Text wrapping options.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWrapMode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "weight": {
              "description": "(**default=`\"normal\"`**) Font weight. The selected font needs to support the specified weight.",
              "anyOf": [
                {
                  "$ref": "#/definitions/TextWeight"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "tiles"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "children": {
              "description": "List of component's children.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "width": {
              "description": "Width of a component in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "background_color_rgba": {
              "description": "(**default=`\"#00000000\"`**) Background color in a `\"#RRGGBBAA\"` format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RGBAColor"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tile_aspect_ratio": {
              "description": "(**default=`\"16:9\"`**) Aspect ratio of a tile in `\"W:H\"` format, where W and H are integers.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AspectRatio"
                },
                {
                  "type": "null"
                }
              ]
            },
            "margin": {
              "description": "(**default=`0`**) Margin of each tile in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "padding": {
              "description": "(**default=`0`**) Padding on each tile in pixels.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "horizontal_align": {
              "description": "(**default=`\"center\"`**) Horizontal alignment of tiles.",
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "vertical_align": {
              "description": "(**default=`\"center\"`**) Vertical alignment of tiles.",
              "anyOf": [
                {
                  "$ref": "#/definitions/VerticalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "transition": {
              "description": "Defines how this component will behave during a scene update. This will only have an effect if the previous scene already contained a `Tiles` component with the same id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "child",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "rescaler"
              ]
            },
            "id": {
              "description": "Id of a component.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ComponentId"
                },
                {
                  "type": "null"
                }
              ]
            },
            "child": {
              "description": "List of component's children.",
              "allOf": [
                {
                  "$ref": "#/definitions/Component"
                }
              ]
            },
            "mode": {
              "description": "(**default=`\"fit\"`**) Resize mode:",
              "anyOf": [
                {
                  "$ref": "#/definitions/RescaleMode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "horizontal_align": {
              "description": "(**default=`\"center\"`**) Horizontal alignment.",
              "anyOf": [
                {
                  "$ref": "#/definitions/HorizontalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "vertical_align": {
              "description": "(**default=`\"center\"`**) Vertical alignment.",
              "anyOf": [
                {
                  "$ref": "#/definitions/VerticalAlign"
                },
                {
                  "type": "null"
                }
              ]
            },
            "width": {
              "description": "Width of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "height": {
              "description": "Height of a component in pixels. Required when using absolute positioning.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "top": {
              "description": "Distance in pixels between this component's top edge and its parent's top edge. If this field is defined, then the component will ignore a layout defined by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "left": {
              "description": "Distance in pixels between this component's left edge and its parent's left edge. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "bottom": {
              "description": "Distance in pixels between this component's bottom edge and its parent's bottom edge. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "right": {
              "description": "Distance in pixels between this component's right edge and its parent's right edge. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "rotation": {
              "description": "Rotation of a component in degrees. If this field is defined, this element will be absolutely positioned, instead of being laid out by its parent.",
              "type": [
                "number",
                "null"
              ],
              "format": "float"
            },
            "transition": {
              "description": "Defines how this component will behave during a scene update. This will only have an effect if the previous scene already contained a View component with the same id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Transition"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ComponentId": {
      "type": "string"
    },
    "ViewDirection": {
      "oneOf": [
        {
          "description": "Children positioned from left to right.",
          "type": "string",
          "enum": [
            "row"
          ]
        },
        {
          "description": "Children positioned from top to bottom.",
          "type": "string",
          "enum": [
            "column"
          ]
        }
      ]
    },
    "Transition": {
      "type": "object",
      "required": [
        "duration_ms"
      ],
      "properties": {
        "duration_ms": {
          "description": "Duration of a transition in milliseconds.",
          "type": "number",
          "format": "double"
        },
        "easing_function": {
          "anyOf": [
            {
              "$ref": "#/definitions/EasingFunction"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "EasingFunction": {
      "description": "Easing functions are used to interpolate between two values over time.\n\nCustom easing functions can be implemented with cubic Bézier. The control points are defined with `points` field by providing four numerical values: `x1`, `y1`, `x2` and `y2`. The `x1` and `x2` values have to be in the range `[0; 1]`. The cubic Bézier result is clamped to the range `[0; 1]`. You can find example control point configurations [here](https://easings.net/).",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "function_name"
          ],
          "properties": {
            "function_name": {
              "type": "string",
              "enum": [
                "linear"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "function_name"
          ],
          "properties": {
            "function_name": {
              "type": "string",
              "enum": [
                "bounce"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "function_name",
            "points"
          ],
          "properties": {
            "function_name": {
              "type": "string",
              "enum": [
                "cubic_bezier"
              ]
            },
            "points": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              },
              "maxItems": 4,
              "minItems": 4
            }
          }
        }
      ]
    },
    "Overflow": {
      "oneOf": [
        {
          "description": "Render everything, including content that extends beyond their parent.",
          "type": "string",
          "enum": [
            "visible"
          ]
        },
        {
          "description": "Render only parts of the children that are inside their parent area.",
          "type": "string",
          "enum": [
            "hidden"
          ]
        },
        {
          "description": "If children components are too big to fit inside the parent, resize everything inside to fit.\n\nComponents that have unknown sizes will be treated as if they had a size 0 when calculating scaling factor.\n\n<br/><br/>\n\n:::warning\n\nThis will resize everything inside, even absolutely positioned elements. For example, if you have an element in the bottom right corner and the content will be rescaled by a factor 0.5x, then that component will end up in the middle of its parent\n\n:::",
          "type": "string",
          "enum": [
            "fit"
          ]
        }
      ]
    },
    "RGBAColor": {
      "type": "string"
    },
    "RendererId": {
      "type": "string"
    },
    "ShaderParam": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "f32"
              ]
            },
            "value": {
              "type": "number",
              "format": "float"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "u32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "i32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "list"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParam"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "struct"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ShaderParamStructField": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "f32"
              ]
            },
            "value": {
              "type": "number",
              "format": "float"
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "u32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "i32"
              ]
            },
            "value": {
              "type": "integer",
              "format": "int32"
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "list"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParam"
              }
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "struct"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShaderParamStructField"
              }
            },
            "field_name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ],
      "required": [
        "field_name"
      ],
      "properties": {
        "field_name": {
          "type": "string"
        }
      }
    },
    "TextStyle": {
      "type": "string",
      "enum": [
        "normal",
        "italic",
        "oblique"
      ]
    },
    "HorizontalAlign": {
      "type": "string",
      "enum": [
        "left",
        "right",
        "justified",
        "center"
      ]
    },
    "TextWrapMode": {
      "oneOf": [
        {
          "description": "Disable text wrapping. Text that does not fit inside the texture will be cut off.",
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "description": "Wraps at a glyph level.",
          "type": "string",
          "enum": [
            "glyph"
          ]
        },
        {
          "description": "Wraps at a word level. Prevent splitting words when wrapping.",
          "type": "string",
          "enum": [
            "word"
          ]
        }
      ]
    },
    "TextWeight": {
      "description": "Font weight, based on the [OpenType specification](https://learn.microsoft.com/en-gb/typography/opentype/spec/os2#usweightclass).",
      "oneOf": [
        {
          "description": "Weight 100.",
          "type": "string",
          "enum": [
            "thin"
          ]
        },
        {
          "description": "Weight 200.",
          "type": "string",
          "enum": [
            "extra_light"
          ]
        },
        {
          "description": "Weight 300.",
          "type": "string",
          "enum": [
            "light"
          ]
        },
        {
          "description": "Weight 400.",
          "type": "string",
          "enum": [
            "normal"
          ]
        },
        {
          "description": "Weight 500.",
          "type": "string",
          "enum": [
            "medium"
          ]
        },
        {
          "description": "Weight 600.",
          "type": "string",
          "enum": [
            "semi_bold"
          ]
        },
        {
          "description": "Weight 700.",
          "type": "string",
          "enum": [
            "bold"
          ]
        },
        {
          "description": "Weight 800.",
          "type": "string",
          "enum": [
            "extra_bold"
          ]
        },
        {
          "description": "Weight 900.",
          "type": "string",
          "enum": [
            "black"
          ]
        }
      ]
    },
    "AspectRatio": {
      "type": "string"
    },
    "VerticalAlign": {
      "type": "string",
      "enum": [
        "top",
        "center",
        "bottom",
        "justified"
      ]
    },
    "RescaleMode": {
      "oneOf": [
        {
          "description": "Resize the component proportionally, so one of the dimensions is the same as its parent, but it still fits inside it.",
          "type": "string",
          "enum": [
            "fit"
          ]
        },
        {
          "description": "Resize the component proportionally, so one of the dimensions is the same as its parent and the entire area of the parent is covered. Parts of a child that do not fit inside the parent are not rendered.",
          "type": "string",
          "enum": [
            "fill"
          ]
        }
      ]
    },
    "OutputEndCondition": {
      "type": "object",
      "properties": {
        "any_of": {
          "description": "Output will be terminated if any of the listed input streams are finished.\n\nInput stream is considered finished if: - Input never existed - RTCP Goodbye packet was received - MP4 track has ended - Input was unregistered (before or after output registration)\n\nIn particular, output stream will **be** terminated if no inputs were ever connected.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/InputId"
          }
        },
        "all_of": {
          "description": "Output will be terminated if all of the listed input streams are finished. In particular, output stream will **be** terminated if no inputs were ever connected.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/InputId"
          }
        },
        "any_input": {
          "description": "Output will be terminated in any of the input streams did terminate. This includes streams added after the output was registered. In particular, output stream will **not be** terminated if no inputs were ever connected.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "all_inputs": {
          "description": "Output will be terminated if all of the input streams are finished. In particular, output stream will **be** terminated if no inputs were ever connected.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "OutputAudioOptions": {
      "type": "object",
      "required": [
        "channels",
        "initial"
      ],
      "properties": {
        "initial": {
          "description": "Initial audio for output.",
          "allOf": [
            {
              "$ref": "#/definitions/Audio"
            }
          ]
        },
        "channels": {
          "$ref": "#/definitions/AudioChannels"
        },
        "forward_error_correction": {
          "description": "(**default=`false`**) Specifies whether the stream use forward error correction. It's specific for Opus codec. For more information, check out [RFC](https://datatracker.ietf.org/doc/html/rfc6716#section-2.1.7).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "encoder_preset": {
          "description": "(**default=\"voip\"**) Specifies preset for audio output encoder.",
          "anyOf": [
            {
              "$ref": "#/definitions/AudioEncoderPreset"
            },
            {
              "type": "null"
            }
          ]
        },
        "send_eos_when": {
          "description": "Condition for termination of output stream based on the input streams states.",
          "anyOf": [
            {
              "$ref": "#/definitions/OutputEndCondition"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Audio": {
      "type": "object",
      "required": [
        "inputs"
      ],
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputAudio"
          }
        }
      }
    },
    "InputAudio": {
      "type": "object",
      "required": [
        "input_id"
      ],
      "properties": {
        "input_id": {
          "$ref": "#/definitions/InputId"
        },
        "volume": {
          "type": [
            "number",
            "null"
          ],
          "format": "float"
        }
      }
    },
    "AudioChannels": {
      "oneOf": [
        {
          "description": "Mono audio (single channel).",
          "type": "string",
          "enum": [
            "mono"
          ]
        },
        {
          "description": "Stereo audio (two channels).",
          "type": "string",
          "enum": [
            "stereo"
          ]
        }
      ]
    },
    "AudioEncoderPreset": {
      "oneOf": [
        {
          "description": "Best for broadcast/high-fidelity application where the decoded audio should be as close as possible to the input.",
          "type": "string",
          "enum": [
            "quality"
          ]
        },
        {
          "description": "Best for most VoIP/videoconference applications where listening quality and intelligibility matter most.",
          "type": "string",
          "enum": [
            "voip"
          ]
        },
        {
          "description": "Only use when lowest-achievable latency is what matters most.",
          "type": "string",
          "enum": [
            "lowest_latency"
          ]
        }
      ]
    },
    "WebEmbeddingMethod": {
      "oneOf": [
        {
          "description": "Pass raw input frames as JS buffers so they can be rendered, for example, using a `<canvas>` component.\n\n<br/> <br/>\n\n:::warning\n\nThis method might have a significant performance impact, especially for a large number of inputs.\n\n:::",
          "type": "string",
          "enum": [
            "chromium_embedding"
          ]
        },
        {
          "description": "Render a website without any inputs and overlay them over the website content.",
          "type": "string",
          "enum": [
            "native_embedding_over_content"
          ]
        },
        {
          "description": "Render a website without any inputs and overlay them under the website content.",
          "type": "string",
          "enum": [
            "native_embedding_under_content"
          ]
        }
      ]
    }
  }
}
