{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RegisterRequest",
  "oneOf": [
    {
      "description": "Parameters for an input stream from RTP source. At least one of `video` and `audio` has to be defined.",
      "type": "object",
      "required": [
        "entity_type",
        "input_id",
        "port"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "rtp_input_stream"
          ]
        },
        "input_id": {
          "description": "An identifier for the input stream.",
          "allOf": [
            {
              "$ref": "#/definitions/InputId"
            }
          ]
        },
        "port": {
          "description": "UDP port or port range on which the compositor should listen for the stream.",
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            }
          ]
        },
        "video": {
          "description": "Parameters of a video source included in the RTP stream.",
          "anyOf": [
            {
              "$ref": "#/definitions/Video"
            },
            {
              "type": "null"
            }
          ]
        },
        "audio": {
          "description": "Parameters of an audio source included in the RTP stream.",
          "anyOf": [
            {
              "$ref": "#/definitions/Audio"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": "Input stream from MP4 file. Exactly one of `url` and `path` has to be defined.",
      "type": "object",
      "required": [
        "entity_type",
        "input_id"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "mp4"
          ]
        },
        "input_id": {
          "description": "An identifier for the input stream.",
          "allOf": [
            {
              "$ref": "#/definitions/InputId"
            }
          ]
        },
        "url": {
          "description": "URL of the MP4 file.",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "Path to the MP4 file.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "ip",
        "output_id",
        "port",
        "resolution"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "output_stream"
          ]
        },
        "output_id": {
          "$ref": "#/definitions/OutputId"
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "ip": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        },
        "encoder_preset": {
          "anyOf": [
            {
              "$ref": "#/definitions/EncoderPreset"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "shader_id",
        "source"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "shader"
          ]
        },
        "shader_id": {
          "description": "Id of a shader. It can be used in a [`Shader`](../components/Shader) component after registration.",
          "allOf": [
            {
              "$ref": "#/definitions/RendererId"
            }
          ]
        },
        "source": {
          "description": "Shader source code. [Learn more.](../../concept/shaders)",
          "type": "string"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "entity_type",
        "instance_id",
        "resolution",
        "url"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "web_renderer"
          ]
        },
        "instance_id": {
          "description": "Id of a web renderer instance. It can be used in a [`WebView`](../components/WebView) component after registration.",
          "allOf": [
            {
              "$ref": "#/definitions/RendererId"
            }
          ]
        },
        "url": {
          "description": "Url of a website that you want to render.",
          "type": "string"
        },
        "resolution": {
          "description": "Resolution.",
          "allOf": [
            {
              "$ref": "#/definitions/Resolution"
            }
          ]
        },
        "embedding_method": {
          "description": "Mechanism used to render input frames on the website.",
          "anyOf": [
            {
              "$ref": "#/definitions/WebEmbeddingMethod"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "png"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "jpeg"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "svg"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            },
            "resolution": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Resolution"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "asset_type",
            "image_id"
          ],
          "properties": {
            "asset_type": {
              "type": "string",
              "enum": [
                "gif"
              ]
            },
            "image_id": {
              "$ref": "#/definitions/RendererId"
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      ],
      "required": [
        "entity_type"
      ],
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "image"
          ]
        }
      }
    }
  ],
  "definitions": {
    "InputId": {
      "type": "string"
    },
    "Port": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      ]
    },
    "Video": {
      "type": "object",
      "properties": {
        "codec": {
          "description": "(**default=`\"h264\"`**) Video codec.",
          "anyOf": [
            {
              "$ref": "#/definitions/VideoCodec"
            },
            {
              "type": "null"
            }
          ]
        },
        "rtp_payload_type": {
          "description": "(**default=`96`**) Value of payload type field in received RTP packets.\n\nPackets with different payload type won't be treated as video and included in composing. Values should be in [0, 64] or [96, 255]. Values in range [65, 95] can't be used. For more information, see [RFC](https://datatracker.ietf.org/doc/html/rfc5761#section-4) Packets with different payload type won't be treated as video and included in composing.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "VideoCodec": {
      "oneOf": [
        {
          "description": "H264 video.",
          "type": "string",
          "enum": [
            "h264"
          ]
        }
      ]
    },
    "Audio": {
      "type": "object",
      "required": [
        "channels",
        "sample_rate"
      ],
      "properties": {
        "codec": {
          "description": "(**default=`\"opus\"`**) Audio codec.",
          "anyOf": [
            {
              "$ref": "#/definitions/AudioCodec"
            },
            {
              "type": "null"
            }
          ]
        },
        "sample_rate": {
          "description": "Sample rate. If the specified sample rate doesn't match real sample rate, audio won't be mixed properly.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "channels": {
          "description": "Audio channels.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioChannels"
            }
          ]
        },
        "rtp_payload_type": {
          "description": "(**default=`97`**) Value of payload type field in received RTP packets.\n\nPackets with different payload type won't be treated as audio and included in mixing. Values should be in range [0, 64] or [96, 255]. Values in range [65, 95] can't be used. For more information, check out [RFC](https://datatracker.ietf.org/doc/html/rfc5761#section-4).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "forward_error_correction": {
          "description": "(**default=`\"false\"`**) Specifies whether the stream uses forward error correction. It's specific for Opus codec. For more information, check out [RFC](https://datatracker.ietf.org/doc/html/rfc6716#section-2.1.7).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "AudioCodec": {
      "oneOf": [
        {
          "description": "Opus audio.",
          "type": "string",
          "enum": [
            "opus"
          ]
        }
      ]
    },
    "AudioChannels": {
      "oneOf": [
        {
          "description": "Mono audio (single channel).",
          "type": "string",
          "enum": [
            "mono"
          ]
        },
        {
          "description": "Stereo audio (two channels).",
          "type": "string",
          "enum": [
            "stereo"
          ]
        }
      ]
    },
    "OutputId": {
      "type": "string"
    },
    "Resolution": {
      "type": "object",
      "required": [
        "height",
        "width"
      ],
      "properties": {
        "width": {
          "description": "Width in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "height": {
          "description": "Height in pixels.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      }
    },
    "EncoderPreset": {
      "type": "string",
      "enum": [
        "ultrafast",
        "superfast",
        "veryfast",
        "faster",
        "fast",
        "medium",
        "slow",
        "slower",
        "veryslow",
        "placebo"
      ]
    },
    "RendererId": {
      "type": "string"
    },
    "WebEmbeddingMethod": {
      "oneOf": [
        {
          "description": "Pass raw input frames as JS buffers so they can be rendered, for example, using a `<canvas>` component.\n\n<br/> <br/>\n\n:::warning\n\nThis method might have a significant performance impact, especially for a large number of inputs.\n\n:::",
          "type": "string",
          "enum": [
            "chromium_embedding"
          ]
        },
        {
          "description": "Render a website without any inputs and overlay them over the website content.",
          "type": "string",
          "enum": [
            "native_embedding_over_content"
          ]
        },
        {
          "description": "Render a website without any inputs and overlay them under the website content.",
          "type": "string",
          "enum": [
            "native_embedding_under_content"
          ]
        }
      ]
    }
  }
}
