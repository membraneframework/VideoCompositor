"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[5383],{58415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var o=t(74848),s=t(28453);const i={description:"React Hooks available provided by LiveCompositor SDK"},r="Hooks",c={id:"typescript/hooks",title:"Hooks",description:"React Hooks available provided by LiveCompositor SDK",source:"@site/pages/typescript/hooks.md",sourceDirName:"typescript",slug:"/typescript/hooks",permalink:"/docs/typescript/hooks",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"React Hooks available provided by LiveCompositor SDK"},sidebar:"sidebar",previous:{title:"Reference",permalink:"/docs/typescript/api"},next:{title:"InputStream",permalink:"/docs/typescript/components/InputStream"}},d={},u=[{value:"<code>useInputStreams</code>",id:"useinputstreams",level:2},{value:"<code>useInputAudio</code>",id:"useinputaudio",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"hooks",children:"Hooks"}),"\n",(0,o.jsxs)(n.p,{children:["When you define how the LiveCompositor should compose streams you can use regular React hooks like ",(0,o.jsx)(n.code,{children:"useState"}),"\nor ",(0,o.jsx)(n.code,{children:"useEffect"}),", but this SDK provides few compositor specific hooks to interact with the audio/video."]}),"\n",(0,o.jsx)(n.h2,{id:"useinputstreams",children:(0,o.jsx)(n.code,{children:"useInputStreams"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"type InputStreamInfo = {\n  inputId: InputId;\n  videoState?: 'ready' | 'playing' | 'finished';\n  audioState?: 'ready' | 'playing' | 'finished';\n}\n\nfunction useInputStreams(): Record<InputId, InputStreamInfo>: \n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"useInputStreams"})," returns an object representing connected streams and their current state."]}),"\n",(0,o.jsx)(n.h2,{id:"useinputaudio",children:(0,o.jsx)(n.code,{children:"useInputAudio"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"type AudioOptions = {\n  volume: number\n}\n\nfunction useAudioInput(inputId: Api.InputId, audioOptions: AudioOptions);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Hook used to control audio configuration. If you already placing ",(0,o.jsx)(n.a,{href:"/docs/typescript/components/InputStream",children:(0,o.jsx)(n.code,{children:"InputStream"})})," component\nyou can use ",(0,o.jsx)(n.code,{children:"mute"})," and ",(0,o.jsx)(n.code,{children:"volume"})," props instead."]}),"\n",(0,o.jsx)(n.p,{children:"Adding this hook more than once for the specific input will sum the volume."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"AudioOptions.volume"})," - number between 0 and 1 representing the audio volume."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);