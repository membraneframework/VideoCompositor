"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[5488],{98714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var s=n(74848),i=n(28453);const r={title:"MP4",description:"MP4 Output"},o="MP4",d={id:"typescript/inputs/mp4",title:"MP4",description:"MP4 Output",source:"@site/pages/typescript/inputs/mp4.md",sourceDirName:"typescript/inputs",slug:"/typescript/inputs/mp4",permalink:"/docs/typescript/inputs/mp4",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"MP4",description:"MP4 Output"},sidebar:"sidebar",previous:{title:"RTP",permalink:"/docs/typescript/inputs/rtp"},next:{title:"HTTP API Reference",permalink:"/docs/category/http-api-reference"}},c={},p=[{value:"<code>Inputs.RegisterMp4Input</code>",id:"inputsregistermp4input",level:2},{value:"Properties",id:"properties",level:4}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"mp4",children:"MP4"}),"\n",(0,s.jsx)(t.p,{children:"An input type that allows the compositor to read static MP4 files."}),"\n",(0,s.jsx)(t.p,{children:"Mp4 files can contain video and audio tracks encoded with various codecs.\nThis input type supports mp4 video tracks encoded with h264 and audio tracks encoded with AAC."}),"\n",(0,s.jsx)(t.p,{children:"If the file contains multiple video or audio tracks, the first audio track and the first video track will be used and the other ones will be ignored."}),"\n",(0,s.jsx)(t.h2,{id:"inputsregistermp4input",children:(0,s.jsx)(t.code,{children:"Inputs.RegisterMp4Input"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"type Mp4Input = {\n  url?: string;\n  serverPath?: string;\n  loop?: bool;\n  required?: bool;\n  offsetMs?: f64;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Input stream from MP4 file.\nExactly one of ",(0,s.jsx)(t.code,{children:"url"})," and ",(0,s.jsx)(t.code,{children:"path"})," has to be defined."]}),"\n",(0,s.jsx)(t.h4,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"url"})," - URL of the MP4 file."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"serverPath"})," - Path to the MP4 file (location on the server where LiveCompositor server is deployed)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"loop"})," - (",(0,s.jsxs)(t.strong,{children:["default=",(0,s.jsx)(t.code,{children:"false"})]}),") If input should be played in the loop. ",(0,s.jsx)("span",{class:"badge badge--primary",children:"Added in v0.4.0"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"required"})," - (",(0,s.jsxs)(t.strong,{children:["default=",(0,s.jsx)(t.code,{children:"false"})]}),") If input is required and frames are not processed\non time, then LiveCompositor will delay producing output frames."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"offsetMs"})," - Offset in milliseconds relative to the pipeline start (start request). If offset is\nnot defined then stream is synchronized based on the first frames delivery time."]}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);