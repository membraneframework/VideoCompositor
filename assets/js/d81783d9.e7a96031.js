"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[1015,2692],{4011:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(5893),i=r(1151);const o={},s=void 0,p={id:"api/generated/renderer-RtpInputStream",title:"renderer-RtpInputStream",description:"RtpInputStream",source:"@site/pages/api/generated/renderer-RtpInputStream.md",sourceDirName:"api/generated",slug:"/api/generated/renderer-RtpInputStream",permalink:"/docs/api/generated/renderer-RtpInputStream",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},d={},c=[{value:"RtpInputStream",id:"rtpinputstream",level:2},{value:"Properties",id:"properties",level:4},{value:"InputRtpVideoOptions",id:"inputrtpvideooptions",level:2},{value:"InputRtpAudioOptions",id:"inputrtpaudiooptions",level:2},{value:"Properties",id:"properties-1",level:4}];function a(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"rtpinputstream",children:"RtpInputStream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type RtpInputStream = {\n  port: string | u16;\n  transport_protocol?: "udp" | "tcp_server";\n  video?: InputRtpVideoOptions;\n  audio?: InputRtpAudioOptions;\n  required?: bool;\n  offset_ms?: f64;\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Parameters for an input stream from RTP source. At least one of ",(0,n.jsx)(t.code,{children:"video"})," and ",(0,n.jsx)(t.code,{children:"audio"})," has to be defined."]}),"\n",(0,n.jsx)(t.h4,{id:"properties",children:"Properties"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"port"})," - UDP port or port range on which the compositor should listen for the stream."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"transport_protocol"})," - Transport protocol.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:'"udp"'})," - UDP protocol."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:'"tcp_server"'})," - TCP protocol where LiveCompositor is the server side of the connection."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"video"})," - Parameters of a video source included in the RTP stream."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"audio"})," - Parameters of an audio source included in the RTP stream."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"required"})," - (",(0,n.jsxs)(t.strong,{children:["default=",(0,n.jsx)(t.code,{children:"false"})]}),") If input is required and the stream is not delivered on time, then LiveCompositor will delay producing output frames."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"offset_ms"})," - Offset in milliseconds relative to the pipeline start (start request). If the offset is not defined then the stream will be synchronized based on the delivery time of the initial frames."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"inputrtpvideooptions",children:"InputRtpVideoOptions"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type InputRtpVideoOptions = {\n  decoder: "ffmpeg_h264";\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"inputrtpaudiooptions",children:"InputRtpAudioOptions"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type InputRtpAudioOptions = {\n  decoder: "opus";\n  forward_error_correction?: bool;\n}\n'})}),"\n",(0,n.jsx)(t.h4,{id:"properties-1",children:"Properties"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"forward_error_correction"})," - (",(0,n.jsxs)(t.strong,{children:["default=",(0,n.jsx)(t.code,{children:"false"})]}),") Specifies whether the stream uses forward error correction. It's specific for Opus codec. For more information, check out ",(0,n.jsx)(t.a,{href:"https://datatracker.ietf.org/doc/html/rfc6716#section-2.1.7",children:"RFC"}),"."]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},408:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var n=r(5893),i=r(1151),o=r(4011);const s={},p="RTP",d={id:"api/inputs/rtp",title:"RTP",description:"An input type that allows streaming video and audio to the compositor over RTP.",source:"@site/pages/api/inputs/rtp.md",sourceDirName:"api/inputs",slug:"/api/inputs/rtp",permalink:"/docs/api/inputs/rtp",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"RTP",permalink:"/docs/api/outputs/rtp"},next:{title:"MP4",permalink:"/docs/api/inputs/mp4"}},c={},a=[];function l(e){const t={h1:"h1",p:"p",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"rtp",children:"RTP"}),"\n",(0,n.jsx)(t.p,{children:"An input type that allows streaming video and audio to the compositor over RTP."}),"\n",(0,n.jsx)(o.default,{})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>p,a:()=>s});var n=r(7294);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);