"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[5983],{55987:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=r(74848),s=r(28453);const i={sidebar_position:6},a="Shader",d={id:"typescript/components/Shader",title:"Shader",description:"Shader applies transformation defined via WGSL shader on its children. Learn more.",source:"@site/pages/typescript/components/Shader.md",sourceDirName:"typescript/components",slug:"/typescript/components/Shader",permalink:"/docs/typescript/components/Shader",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"sidebar",previous:{title:"Text",permalink:"/docs/typescript/components/Text"},next:{title:"Image",permalink:"/docs/typescript/components/Image"}},o={},c=[{value:"ShaderProps",id:"shaderprops",level:2},{value:"ShaderParam",id:"shaderparam",level:2},{value:"ShaderParamStructField",id:"shaderparamstructfield",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"shader",children:"Shader"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Shader"})," applies transformation defined via WGSL shader on its children. ",(0,t.jsx)(n.a,{href:"/docs/concept/shaders",children:"Learn more."})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["To use this component, you need to first register the shader with matching ",(0,t.jsx)(n.code,{children:"shaderId"})," using ",(0,t.jsx)(n.a,{href:"/docs/typescript/api#register-shader",children:(0,t.jsx)(n.code,{children:"LiveCompositor.registerShader"})})," method."]})}),"\n",(0,t.jsx)(n.h2,{id:"shaderprops",children:"ShaderProps"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type ShaderProps = {\n  id?: string;\n  children?: ReactElement[];\n  shaderId: string;\n  shaderParam?: ShaderParam;\n  resolution: {\n    width: number;\n    height: number;\n  };\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"id"})," - Id of a component. Defaults to value produced by ",(0,t.jsx)(n.code,{children:"useId"})," hook."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"children"})," - List of component's children."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"shaderId"})," - Id of a shader. It identifies a shader registered using a ",(0,t.jsx)(n.a,{href:"/docs/typescript/api#register-shader",children:(0,t.jsx)(n.code,{children:"LiveCompositor.registerShader"})})," method."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"shaderParam"})," - Object that will be serialized into a ",(0,t.jsx)(n.code,{children:"struct"})," and passed inside the shader as:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-wgsl",children:"@group(1) @binding(0) var<uniform>\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This object's structure must match the structure defined in a shader source code. Currently, we do not handle memory layout automatically.\nTo achieve the correct memory alignment, you might need to pad your data with additional fields. See ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/WGSL/#alignment-and-size",children:"WGSL documentation"})," for more details."]})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"resolution"})," - Resolution of a texture where shader will be executed."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"shaderparam",children:"ShaderParam"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type ShaderParam = \n  | { type: "f32"; value: number; }\n  | { type: "u32"; value: number; }\n  | { type: "i32"; value: number; }\n  | { type: "list"; value: ShaderParam[]; }\n  | {\n      type: "struct";\n      value: ShaderParamStructField[];\n    }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"shaderparamstructfield",children:"ShaderParamStructField"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type ShaderParamStructField = \n  | { fieldName: string; type: "f32"; value: number; }\n  | { fieldName: string; type: "u32"; value: number; }\n  | { fieldName: string; type: "i32"; value: number; }\n  | {\n      fieldName: string;\n      type: "list";\n      value: ShaderParam[];\n    }\n  | {\n      fieldName: string;\n      type: "struct";\n      value: ShaderParamStructField[];\n    }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var t=r(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);