"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[7508],{5237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var r=n(5893),s=n(1151);const i={description:"API routes to configure the compositor."},o="Routes",d={id:"api/routes",title:"Routes",description:"API routes to configure the compositor.",source:"@site/pages/api/routes.md",sourceDirName:"api",slug:"/api/routes",permalink:"/docs/api/routes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"API routes to configure the compositor."},sidebar:"sidebar",previous:{title:"API Reference",permalink:"/docs/category/api-reference"},next:{title:"InputStream",permalink:"/docs/api/components/InputStream"}},c={},p=[{value:"Endpoint <code>POST /--/api</code>",id:"endpoint-post---api",level:2},{value:"Start",id:"start",level:3},{value:"Update output",id:"update-output",level:3},{value:"Register input stream",id:"register-input-stream",level:3},{value:"Register output stream",id:"register-output-stream",level:3},{value:"Register renderer",id:"register-renderer",level:3},{value:"Unregister request",id:"unregister-request",level:3},{value:"Endpoint <code>GET /status</code>",id:"endpoint-get-status",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"routes",children:"Routes"}),"\n",(0,r.jsxs)(t.p,{children:["API is served by default on the port 8081. Different port can be configured using ",(0,r.jsx)(t.a,{href:"../deployment/configuration#live_compositor_api_port",children:(0,r.jsx)(t.code,{children:"LIVE_COMPOSITOR_API_PORT"})})," environment variable."]}),"\n",(0,r.jsxs)(t.h2,{id:"endpoint-post---api",children:["Endpoint ",(0,r.jsx)(t.code,{children:"POST /--/api"})]}),"\n",(0,r.jsx)(t.p,{children:"Main endpoint for configuring the compositor server."}),"\n",(0,r.jsx)(t.h3,{id:"start",children:"Start"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type Start = {\n  type: "start";\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Starts the processing pipeline. If outputs are registered and defined in the scene then the compositor will start to send the RTP stream."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"update-output",children:"Update output"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type UpdateOutput = {\n  type: "update_output";\n  output_id: string;\n  video?: Component;\n  audio?: AudioMixParams\n}\n\ntype AudioMixParams = {\n  inputs: [InputAudioParams]\n}\n\ntype InputAudioParams = {\n  input_id: InputId\n}\n'})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"output_id"})," - Id of an already registered output stream. See ",(0,r.jsx)(t.a,{href:"./routes#register-output-stream",children:(0,r.jsx)(t.code,{children:"RegisterOutputStream"})}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"video"})," - Root of a component tree/scene that should be rendered for the output. ",(0,r.jsx)(t.a,{href:"../concept/component",children:"Learn more"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"audio"})," - Parameters for mixing input audio streams."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"register-input-stream",children:"Register input stream"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type RegisterInputStream = {\n  type: "register";\n  entity_type: "rtp_input_stream" | "mp4";\n  ... // input specific options\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"See inputs documentation to learn more."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"./inputs/rtp",children:"RTP"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"./inputs/mp4",children:"MP4"})}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"register-output-stream",children:"Register output stream"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type RegisterOutputStream = {\n  type: "register";\n  entity_type: "output_stream";\n  output_id: string;\n  transport_protocol?: "udp" | "tcp_server";\n  port: u16;\n  ip?: string;\n  video: Video\n}\n\ntype Video = {\n  resolution: {\n    width: number,\n    height: number\n  },\n  initial: Component\n  encoder_preset?: VideoEncoderPreset,\n}\n\ntype VideoEncoderPreset =\n  | "ultrafast"\n  | "superfast"\n  | "veryfast"\n  | "faster"\n  | "fast"\n  | "medium"\n  | "slow"\n  | "slower"\n  | "veryslow"\n  | "placebo"\n'})}),"\n",(0,r.jsx)(t.p,{children:"Register a new RTP output stream."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"output_id"})," - An identifier for the output stream. It can be used in the ",(0,r.jsx)(t.code,{children:"UpdateOutput"})," request to define what to render for the output stream."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"transport_protocol"})," -  (",(0,r.jsxs)(t.strong,{children:["default=",(0,r.jsx)(t.code,{children:'"udp"'})]}),") Transport layer protocol that will be used to send RTP packets.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"udp"})," - UDP protocol."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tcp_server"})," - TCP protocol where LiveCompositor is the server side of the connection."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"port"})," - Depends on the value of the ",(0,r.jsx)(t.code,{children:"transport_protocol"})," field:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"udp"})," - An UDP port number that RTP packets will be sent to."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tcp_server"})," - A local TCP port number or a port range that LiveCompositor will listen for incoming connections."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ip"})," - Only valid if ",(0,r.jsx)(t.code,{children:'transport_protocol="udp"'}),". IP address where RTP packets should be sent to."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"video.resolution"})," - Output resolution in pixels."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"video.initial"})," - Root of a component tree/scene that should be rendered for the output. Use ",(0,r.jsxs)(t.a,{href:"#update-output",children:[(0,r.jsx)(t.code,{children:"update_output"})," request"]})," to update this value after registration. ",(0,r.jsx)(t.a,{href:"../concept/component",children:"Learn more"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"video.encoder_preset"})," - (",(0,r.jsxs)(t.strong,{children:["default=",(0,r.jsx)(t.code,{children:'"fast"'})]}),") Preset for an encoder. See ",(0,r.jsx)(t.code,{children:"FFmpeg"})," ",(0,r.jsx)(t.a,{href:"https://trac.ffmpeg.org/wiki/Encode/H.264#Preset",children:"docs"})," to learn more."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"register-renderer",children:"Register renderer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type RegisterRenderer = {\n  type: "register";\n  entity_type: "shader" | "web_renderer" | "image";\n  ... // renderer specific options\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"See renderers documentation to learn more."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"./renderers/image",children:"Image"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"./renderers/shader",children:"Shader"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"./renderers/web",children:"WebRenderer"})}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"unregister-request",children:"Unregister request"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type Unregister =\n  | { type: "unregister", entity_type: "input_stream", input_id: string }\n  | { type: "unregister", entity_type: "output_stream", output_id: string }\n  | { type: "unregister", entity_type: "shader", shader_id: string }\n  | { type: "unregister", entity_type: "image", image_id: string }\n  | { type: "unregister", entity_type: "web_renderer", instance_id: string }\n'})}),"\n",(0,r.jsxs)(t.h2,{id:"endpoint-get-status",children:["Endpoint ",(0,r.jsx)(t.code,{children:"GET /status"})]}),"\n",(0,r.jsxs)(t.p,{children:["Status/health check endpoint. Returns ",(0,r.jsx)(t.code,{children:"200 OK"}),"."]})]})}function a(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>o});var r=n(7294);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);