"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[9593],{2331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(5893),r=t(1151);const s={},i="How to receive output streams",a={id:"guides/receive-output",title:"How to receive output streams",description:"Live Compositor currently supports only RTP (H264 + Opus) as an output format:",source:"@site/pages/guides/receive-output.md",sourceDirName:"guides",slug:"/guides/receive-output",permalink:"/docs/guides/receive-output",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"How to deliver input streams",permalink:"/docs/guides/deliver-input"},next:{title:"Component",permalink:"/docs/concept/component"}},c={},d=[{value:"RTP over TCP vs UDP",id:"rtp-over-tcp-vs-udp",level:3},{value:"What to use to receive RTP streams?",id:"what-to-use-to-receive-rtp-streams",level:3},{value:"Membrane Framework",id:"membrane-framework",level:4},{value:"FFmpeg",id:"ffmpeg",level:4},{value:"GStreamer",id:"gstreamer",level:4}];function p(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-receive-output-streams",children:"How to receive output streams"}),"\n",(0,o.jsx)(n.p,{children:"Live Compositor currently supports only RTP (H264 + Opus) as an output format:"}),"\n",(0,o.jsx)(n.h3,{id:"rtp-over-tcp-vs-udp",children:"RTP over TCP vs UDP"}),"\n",(0,o.jsx)(n.p,{children:"RTP streams can be delivered over TCP or UDP. Depending on your use case, a different choice might make more sense, but in general, we recommend using TCP if possible."}),"\n",(0,o.jsx)(n.p,{children:"What to choose?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If you are using the Membrane Framework plugin all communication already happens over TCP. Currently, we do not support any way to configure it."}),"\n",(0,o.jsx)(n.li,{children:"Some of the popular multimedia tools do not support RTP over TCP e.g. FFmpeg."}),"\n",(0,o.jsx)(n.li,{children:"UDP should only be used for communication on localhost. We do not support retransmission or packet reordering, so if you use it in an unreliable network it might lead to unexpected behavior."}),"\n",(0,o.jsx)(n.li,{children:"UDP does not have a congestion control, so if you are using any non-real-time sources for inputs (e.g. streaming file with FFmpeg over RTP) then if you don't throttle the input it might lead to high memory usage."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"what-to-use-to-receive-rtp-streams",children:"What to use to receive RTP streams?"}),"\n",(0,o.jsx)(n.h4,{id:"membrane-framework",children:"Membrane Framework"}),"\n",(0,o.jsxs)(n.p,{children:["If you are using the Membrane Framework plugin you do not need anything else. Just connect appropriate output pads to the ",(0,o.jsx)(n.code,{children:"LiveCompositor"})," bin."]}),"\n",(0,o.jsx)(n.h4,{id:"ffmpeg",children:"FFmpeg"}),"\n",(0,o.jsx)(n.p,{children:"FFmpeg does not support RTP over TCP, so you are limited to UDP only."}),"\n",(0,o.jsx)(n.p,{children:"Start by creating one of the following SDP files:"}),"\n",(0,o.jsxs)(n.p,{children:["For streaming H264 video to ",(0,o.jsx)(n.code,{children:"127.0.0.1:9001"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"output.sdp"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"v=0\no=- 0 0 IN IP4 127.0.0.1\ns=No Name\nc=IN IP4 127.0.0.1\nm=video 9001 RTP/AVP 96\na=rtpmap:96 H264/90000\na=fmtp:96 packetization-mode=1\na=rtcp-mux\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For streaming H264 video to ",(0,o.jsx)(n.code,{children:"127.0.0.1:9001"})," and Opus audio to ",(0,o.jsx)(n.code,{children:"127.0.0.1:9002"})," (multiplexing on the same port does not seem to work)."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"output.sdp"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"v=0\no=- 0 0 IN IP4 127.0.0.1\ns=No Name\nc=IN IP4 127.0.0.1\nm=video 9001 RTP/AVP 96\na=rtpmap:96 H264/90000\na=fmtp:96 packetization-mode=1\na=rtcp-mux\nm=audio 9002 RTP/AVP 97\na=rtpmap:97 opus/48000/2\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To play the stream with ",(0,o.jsx)(n.code,{children:"ffplay"})," run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'ffplay -protocol_whitelist "file,rtp,udp" output.sdp\n'})}),"\n",(0,o.jsx)(n.p,{children:"To save stream as mp4:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'ffmpeg -protocol_whitelist "file,rtp,udp" -i output.sdp out.mp4\n'})}),"\n",(0,o.jsx)(n.h4,{id:"gstreamer",children:"GStreamer"}),"\n",(0,o.jsxs)(n.p,{children:["Receive RTP stream over TCP by connecting to ",(0,o.jsx)(n.code,{children:"127.0.0.1:9001"}),". Play both audio and video streams using ",(0,o.jsx)(n.code,{children:"autovideosink"}),"\nand ",(0,o.jsx)(n.code,{children:"autoaudiosink"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'gst-launch-1.0 rtpptdemux name=demux \\\n    tcpclientsrc host=127.0.0.1 port=9001 ! \\"application/x-rtp-stream\\" ! rtpstreamdepay ! demux. \\\n    demux.src_96 ! \\"application/x-rtp,media=video,clock-rate=90000,encoding-name=H264\\" ! queue \\\n    ! rtph264depay ! decodebin ! videoconvert ! autovideosink \\\n    demux.src_97 ! \\"application/x-rtp,media=audio,clock-rate=48000,encoding-name=OPUS\\" ! queue \\\n    ! rtpopusdepay ! decodebin ! audioconvert ! autoaudiosink\n'})}),"\n",(0,o.jsx)(n.p,{children:"To use UDP instead replace"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'tcpclientsrc host=127.0.0.1 port=9001 ! \\"application/x-rtp-stream\\" ! rtpstreamdepay\n'})}),"\n",(0,o.jsx)(n.p,{children:"with"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"udpsrc port=9001\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var o=t(7294);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);