"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[9547],{41858:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var n=t(74848),i=t(28453);const s={},r="How to use it?",c={id:"intro/how-to-use",title:"How to use it?",description:"Live Compositor can be used or deployed in a few ways.",source:"@site/pages/intro/how-to-use.md",sourceDirName:"intro",slug:"/intro/how-to-use",permalink:"/docs/intro/how-to-use",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"What is Live Compositor?",permalink:"/docs/intro/what-is-compositor"},next:{title:"Where to go next?",permalink:"/docs/intro/where-next"}},a={},l=[{value:"TypeScript/React",id:"typescriptreact",level:2},{value:"Standalone",id:"standalone",level:2},{value:"Membrane Framework plugin",id:"membrane-framework-plugin",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"how-to-use-it",children:"How to use it?"}),"\n",(0,n.jsx)(o.p,{children:"Live Compositor can be used or deployed in a few ways."}),"\n",(0,n.jsx)(o.h2,{id:"typescriptreact",children:"TypeScript/React"}),"\n",(0,n.jsx)(o.p,{children:"TypeScript SDK currently can only be run in Node.js environment, but browser and React Native support will be added soon. Run"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"npm create live-compositor\n"})}),"\n",(0,n.jsx)(o.p,{children:"to generate a new starter project."}),"\n",(0,n.jsx)(o.p,{children:"There are 2 NPM packages that you need to be aware of:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.code,{children:"live-compositor"})," package provides React components and hooks to define how streams should be composed."]}),"\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.code,{children:"@live-compositor/node"})," package provides interface to interact with the Live Compositor server from Node.js environment."]}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["See ",(0,n.jsx)(o.a,{href:"/docs/typescript/api",children:"TypeScript SDK documentation for more"})," to learn more."]}),"\n",(0,n.jsx)(o.h2,{id:"standalone",children:"Standalone"}),"\n",(0,n.jsx)(o.p,{children:"You can use LiveCompositor as a standalone multimedia server. The server can be started by:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["Building ",(0,n.jsx)(o.a,{href:"https://github.com/software-mansion/live-compositor",children:(0,n.jsx)(o.code,{children:"github.com/software-mansion/live-compositor"})})," from source."]}),"\n",(0,n.jsxs)(o.li,{children:["Using binaries from ",(0,n.jsx)(o.a,{href:"https://github.com/software-mansion/live-compositor/releases",children:"GitHub releases"}),"."]}),"\n",(0,n.jsxs)(o.li,{children:["Using Docker","\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["(recommended) Dockerfile with compositor without web rendering support ",(0,n.jsx)(o.a,{href:"https://github.com/software-mansion/live-compositor/blob/master/build_tools/docker/slim.Dockerfile",children:"https://github.com/software-mansion/live-compositor/blob/master/build_tools/docker/slim.Dockerfile"})]}),"\n",(0,n.jsxs)(o.li,{children:["Dockerfile with compositor with web rendering support ",(0,n.jsx)(o.a,{href:"https://github.com/software-mansion/live-compositor/blob/master/build_tools/docker/full.Dockerfile",children:"https://github.com/software-mansion/live-compositor/blob/master/build_tools/docker/full.Dockerfile"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(o.h2,{id:"membrane-framework-plugin",children:"Membrane Framework plugin"}),"\n",(0,n.jsx)(o.p,{children:"Membrane Framework has its own way of handling multimedia, so to fit into that ecosystem some features do not translate one-to-one between standalone compositor and the plugin."}),"\n",(0,n.jsx)(o.p,{children:"Notable differences:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:"Inputs/outputs in LiveCompositor can include both audio and video at the same time, but with the Membrane plugin you need to create separate inputs/outputs for each media type."}),"\n",(0,n.jsx)(o.li,{children:"No support for MP4 files as input. It is more idiomatic to use Membrane plugins to read MP4 files instead."}),"\n",(0,n.jsx)(o.li,{children:"To connect inputs/outputs to LiveCompositor you need to first register them before sending/receiving the stream, but with the Membrane plugin connecting pads covers both those steps."}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["Parts of this documentation were written with a standalone scenario in mind, so make sure to always consult ",(0,n.jsx)(o.a,{href:"https://hexdocs.pm/membrane_live_compositor_plugin/0.9.0/Membrane.LiveCompositor.html",children:"the plugin documentation"})," first. For example, to see how to send a scene update check out documentation on ",(0,n.jsx)(o.code,{children:"HexDocs"}),", but if you want to know what options the ",(0,n.jsx)(o.code,{children:"View"})," component supports, then consult the documentation ",(0,n.jsx)(o.a,{href:"/docs/api/components/View",children:"here"}),"."]})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>c});var n=t(96540);const i={},s=n.createContext(i);function r(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);