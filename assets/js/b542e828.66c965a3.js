"use strict";(self.webpackChunkcompositor_live=self.webpackChunkcompositor_live||[]).push([[935],{5237:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var n=r(5893),s=r(1151);const i={description:"API routes to configure the compositor."},o="Routes",d={id:"api/routes",title:"Routes",description:"API routes to configure the compositor.",source:"@site/pages/api/routes.md",sourceDirName:"api",slug:"/api/routes",permalink:"/docs/api/routes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"API routes to configure the compositor."},sidebar:"sidebar",previous:{title:"API Reference",permalink:"/docs/category/api-reference"},next:{title:"InputStream",permalink:"/docs/api/components/InputStream"}},c={},p=[{value:"Start",id:"start",level:3},{value:"Update scene",id:"update-scene",level:3},{value:"Register input stream",id:"register-input-stream",level:3},{value:"Register output stream",id:"register-output-stream",level:3},{value:"Register renderer",id:"register-renderer",level:3},{value:"Unregister request",id:"unregister-request",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"routes",children:"Routes"}),"\n",(0,n.jsx)(t.h3,{id:"start",children:"Start"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type Start = {\n  type: "start";\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Starts the processing pipeline. If outputs are registered and defined in the scene then the compositor will start to send the RTP stream."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"update-scene",children:"Update scene"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type UpdateScene = {\n  type: "update_scene";\n  outputs: OutputScene[];\n}\n\ntype OutputScene = {\n    output_id: string;\n    root: Component;\n}\n'})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"outputs"})," - List of outputs. Identifies what should be rendered for each RTP output streams.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"outputs[].output_id"})," - Id of an already registered output stream. See ",(0,n.jsx)(t.a,{href:"./routes#register-output-stream",children:(0,n.jsx)(t.code,{children:"RegisterOutputStream"})}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"outputs[].root"})," - Root of a component tree that should be rendered for the output. ",(0,n.jsx)(t.a,{href:"../concept/component",children:"Learn more"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"register-input-stream",children:"Register input stream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type RegisterInputStream = {\n  type: "register";\n  entity_type: "input_stream";\n  input_id: string;\n  port: u16 | string;\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Register a new RTP input stream."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"input_id"})," - An identifier for the input stream. It can be used in the ",(0,n.jsx)(t.a,{href:"./components/InputStream",children:(0,n.jsx)(t.code,{children:"InputStream"})})," component to render the stream content."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"port"})," - UDP port or port range on which the compositor should listen for the stream. An integer value between 1 and 65535 that represents a specific port\nor string in the ",(0,n.jsx)(t.code,{children:"START:END"})," format for a port range."]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"register-output-stream",children:"Register output stream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type RegisterOutputStream = {\n  type: "register";\n  entity_type: "output_stream";\n  output_id: string;\n  port: u16;\n  ip: string;\n  resolution: {\n    width: number;\n    height: number;\n  };\n  encoder_settings: {\n    preset: EncoderPreset;\n  };\n}\n\ntype EncoderPreset =\n  | "ultrafast"\n  | "superfast"\n  | "veryfast"\n  | "faster"\n  | "fast"\n  | "medium"\n  | "slow"\n  | "slower"\n  | "veryslow"\n  | "placebo"\n'})}),"\n",(0,n.jsx)(t.p,{children:"Register a new RTP output stream."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"output_id"})," - An identifier for the output stream. It can be used in the ",(0,n.jsx)(t.code,{children:"UpdateScene"})," request to define what to render for the output stream."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"port"})," / ",(0,n.jsx)(t.code,{children:"ip"})," - UDP port and IP where compositor should send the stream."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"resolution"})," - Output resolution in pixels."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"encoder_settings.preset"})," - Preset for an encoder. See ",(0,n.jsx)(t.code,{children:"FFmpeg"})," ",(0,n.jsx)(t.a,{href:"https://trac.ffmpeg.org/wiki/Encode/H.264#Preset",children:"docs"})," to learn more."]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"register-renderer",children:"Register renderer"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type RegisterRenderer = {\n  type: "register";\n  entity_type: "shader" | "web_renderer" | "image";\n  ... // renderer specific options\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"See renderers documentation to learn more."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"./renderers/image",children:"Image"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"./renderers/shader",children:"Shader"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"./renderers/web",children:"WebRenderer"})}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"unregister-request",children:"Unregister request"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'type Unregister =\n  | { type: "unregister", entity_type: "input_stream", input_id: string }\n  | { type: "unregister", entity_type: "output_stream", output_id: string }\n  | { type: "unregister", entity_type: "shader", shader_id: string }\n  | { type: "unregister", entity_type: "image", image_id: string }\n  | { type: "unregister", entity_type: "web_renderer", instance_id: string }\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>d,a:()=>o});var n=r(7294);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);